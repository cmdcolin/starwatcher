{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NameForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","console","log","preventDefault","react_default","a","createElement","onSubmit","type","onChange","Component","StarList","_this2","hits","isLoading","error","_this$props","map","hit","key","objectID","href","url","name","App","_this3","_this4","fetch","concat","then","res","json","data","catch","className","App_NameForm","App_StarList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8908646d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass NameForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { value: '' }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n\n  handleSubmit(event) {\n    console.log('here',this.state.value)\n    this.props.handleSubmit(this.state.value)\n    event.preventDefault()\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Enter your GitHub username{' '}\n          <input\n            type=\"text\"\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }\n}\n\nclass StarList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hits: [],\n      isLoading: false,\n      error: null,\n    }\n  }\n\n  render() {\n    const { hits, isLoading } = this.props\n\n    if (isLoading) {\n      return <p>Loading ...</p>\n    }\n    console.log(hits)\n    return (\n      <ul>\n        {hits.map(hit => (\n          <li key={hit.objectID}>\n            <a href={hit.url}>{hit.name}</a>\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {name: null, hits: [], isLoading: false}\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit(name) {\n    this.setState({isLoading: true})\n    fetch(`https://api.github.com/users/${name}/starred`)\n          .then(res => res.json())\n          .then(data => this.setState({ hits: data, isLoading: false }))\n          .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">starwatcher</header>\n        <p>This page will in the future add the ability to watch releases of your starred repos</p>\n        <NameForm handleSubmit={this.handleSubmit} />\n        <div className=\"StarList\">\n          <StarList isLoading={this.state.isLoading} hits={this.state.hits} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}